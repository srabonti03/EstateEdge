generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/// User roles defining access levels and permissions.
enum Role {
  user
  agent
  admin
}

/// Titles that real estate agents can have, indicating their specialization.
enum AgentTitle {
  real_estate_agent
  senior_property_consultant
  residential_property_expert
  luxury_apartment_specialist
  commercial_space_advisor
  senior_leasing_agent
  urban_property_strategist
  modern_housing_consultant
  plot_land_advisor
  real_estate_investment_consultant
  luxury_villa_specialist
  real_estate_legal_advisor
  land_farm_property_specialist
  commercial_real_estate_agent
  luxury_property_specialist
  plot_development_consultant
  residential_property_broker
  senior_real_estate_consultant
  investment_properties_consultant
}

/// Represents all users in the system, including regular users, agents, and admins.
model User {
  id                       String        @id @default(auto()) @map("_id") @db.ObjectId
  email                    String        @unique
  username                 String        @unique
  password                 String
  avatar                   String?
  role                     Role          @default(user)
  agentTitle               AgentTitle?   @default(real_estate_agent)
  isActive                 Boolean       @default(true)
  phone                    String?
  location                 String?
  bio                      String?
  createdAt                DateTime      @default(now())
  emailVerified            Boolean       @default(false)
  verificationToken        String?
  verificationTokenExpires DateTime?
  tempNewPassword          String?
  posts                    Post[]
  savedPosts               SavedPost[]
  applications             Application[]
  chatIDs                  String[]      @db.ObjectId
}

/// Recruitment posts created by admins to hire new agents or admins.
model Recruitment {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  title              String
  description        String
  role               Role
  agentTitle         AgentTitle?
  isDisabled         Boolean       @default(false)
  location           String?
  positionsAvailable Int?
  postedDay          DateTime      @default(now())
  createdAt          DateTime      @default(now())
  deadline           DateTime?
  applications       Application[]
}

/// Applications submitted by users to recruitment posts,
model Application {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id])
  userId        String      @db.ObjectId
  recruitment   Recruitment @relation(fields: [recruitmentId], references: [id])
  recruitmentId String      @db.ObjectId
  fullName      String
  email         String
  phone         String
  cvLink        String
  portfolioLink String?
  coverLetter   String?
  appliedAt     DateTime    @default(now())
  status        String      @default("pending")

  @@index([userId])
  @@index([recruitmentId])
}

/// Types of properties available in listings.
enum Property {
  apartment
  house
  condo
  land
}

/// Listing types indicating whether a property is for sale or rent.
enum Type {
  buy
  rent
}

/// Utility policies for property listings.
enum UtilitiesPolicy {
  owner
  tenant
  shared
}

/// Pet policies for property listings.
enum PetPolicy {
  allowed
  not_allowed
}

/// Property listings created by agents.
model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
  property   Property
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
  isApproved Boolean     @default(false)
  isSold     Boolean     @default(false)
  isArchived Boolean     @default(false)
  approvedAt DateTime?
}

/// Detailed property description and amenities.
model PostDetail {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  UtilitiesPolicy?
  pet        PetPolicy?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post             @relation(fields: [postId], references: [id])
  postId     String           @unique @db.ObjectId
}

/// Usersâ€™ saved or favorited property listings.
model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

/// Chat sessions between users and agents.
model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userIDs     String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?

  @@index([userIDs], name: "userIDs_index")
}

/// Messages sent in a chat session.
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
